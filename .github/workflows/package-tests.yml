name: Verify Packages

on:
  pull_request:
    paths:
      - packages/**
      - .github/workflows/package-tests.yml

permissions:
  contents: read

jobs:
  verify:
    name: Verify Packages
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Fetch branch from where the PR started
        run: git fetch --no-tags --prune --depth=1 origin +refs/heads/*:refs/remotes/origin/*
      - name: Find packages
        id: find-packages
        run: echo "packages=$(php .github/get-modified-packages.php $(find packages -mindepth 1 -type f -name composer.json -printf '%h\n' | jq -R -s -c 'split("\n")[:-1]') $(git diff --name-only origin/${{ github.base_ref }} HEAD | grep packages/ | jq -R -s -c 'split("\n")[:-1]'))" >> $GITHUB_OUTPUT
      - name: Verify meta files are correct
        run: |
          ok=0

          _file_exist() {
            if [ ! -f "${1}" ]; then
              echo "File ${1} does not exist"
              return 1
            fi
          }

          _file_not_exist() {
            if [ -f "${1}" ]; then
              echo "File ${1} should not be here"
              return 1
            fi
          }

          _correct_license_file() {
            TEMPLATE=$(cat LICENSE.md)
            PACKAGE_LICENSE=$(cat ${1})
            if [[ "$TEMPLATE" != "$PACKAGE_LICENSE" ]]; then
              echo "Wrong content in license file"
              return 1
            fi
          }

          json='${{ steps.find-packages.outputs.packages }}'
          for package in $(echo "${json}" | jq -r '.[] | @base64'); do
            _jq() {
              echo ${package} | base64 --decode | jq -r ${1}
            }

            DIR=$(_jq '.directory')
            NAME=$(_jq '.name')
            echo "::group::$NAME"
            localExit=0

            _file_exist $DIR/.gitignore || localExit=1
            _file_exist $DIR/README.md || localExit=1
            _file_exist $DIR/LICENSE.md || localExit=1
            _file_not_exist $DIR/phpunit.xml || localExit=1

            if [ $(_jq '.new') == true ]; then
              echo "Verifying new package"
              _correct_license_file $DIR/LICENSE.md || localExit=1

              if [ ! $(cat composer.json | jq -e ".replace.\"$NAME\"|test(\"self.version\")") ]; then
                echo "Composer.json's replace section needs to contain $NAME"
                localExit=1
              fi
            fi

            ok=$(( $localExit || $ok ))
            echo ::endgroup::
            if [ $localExit -ne 0 ]; then
              echo "::error::$NAME failed"
            fi
          done

          exit $ok
